METHOD ONE(Time Limit Exceeded)
the failure test is a large amount of 1-length lists,for this method£¬the operation on array cause the overtime. 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode tmp=new ListNode(0);
        ListNode result=tmp;
        int len=0;
        for(ListNode node:lists){
            if(node!=null){
                lists[len]=node;
                len++;
            }
        }
        if(len==0)return null;
        initSort(lists,len);
        while(len>1){
            tmp.next=lists[0];
            lists[0]=lists[0].next;
            tmp=tmp.next;
            len=sortLists(lists,len);
        }
        tmp.next=lists[0];
        return result.next;
    }
    public void initSort(ListNode[] lists,int len){
        ListNode tmp;
        for(int i=0;i<len-1;i++)
            for(int j=i+1;j<len;j++){
                if(lists[i].val>lists[j].val){
                    tmp=lists[i];
                    lists[i]=lists[j];
                    lists[j]=tmp;
                }
            }
    }
    public int sortLists(ListNode[] lists,int len){
        if(lists[0]==null){
            for(int i=0;i<len-1;i++){
                lists[i]=lists[i+1];
            }
            return len-1;
        }else{
            ListNode tmp=lists[0];
            int i=1;
            for(;i<len&&lists[i].val<tmp.val;i++){
                lists[i-1]=lists[i];
            }
            lists[i-1]=tmp;
            return len;
        }
    }
}
---------------------------------------------------------------------------
time limited exceeded :the same test as the first method
---------------------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode result=new ListNode(0);
        ListNode tmp=result;
        for(ListNode ll:lists){
           tmp.next=mergell(tmp.next,ll);
        }
        return tmp.next;
    }
    public ListNode mergell(ListNode l1,ListNode l2){
        ListNode tmp=new ListNode(0);
        ListNode result=tmp;
        while(l1!=null||l2!=null){
            if(l1==null){
                tmp.next=l2;
                break;
            }else if(l2==null){
                tmp.next=l1;
                break;
            }else{
                if(l1.val<=l2.val){
                    tmp.next=l1;
                    l1=l1.next;
                    tmp=tmp.next;
                }else{
                    tmp.next=l2;
                    l2=l2.next;
                    tmp=tmp.next;
                }
            }
        }
        return result.next;
    }
}