METHOD ONE(5.20% 1ms T2)
public class Solution {
    public int findMin(int[] nums) {
        if(nums[0]<=nums[nums.length-1])return nums[0];
        int start=0;
        int end=nums.length-1;
        int mid=(start+end)/2;
        int min=nums[end];
        int tmp=mid==0?nums.length-1:mid-1;
        while(nums[mid]>nums[tmp]){
            mid=(start+end)/2;
            if(nums[mid]>min){
                start=mid+1;
            }else{
                min=nums[mid];
                end=mid-1;
            }
            tmp=mid==0?nums.length-1:mid-1;
        }
        return nums[mid];
    }
}
-------------------------------------------
METHOD TWO£¨5.20% 1ms T2£©
public class Solution {
    public int findMin(int[] nums) {
        if(nums[0]<=nums[nums.length-1])return nums[0];
        int start=0;
        int end=nums.length-1;
        int mid=0;
        while(start<end){
            mid=(start+end)/2;
            if(mid>0&&nums[mid]<nums[mid-1])return nums[mid];
            if(nums[mid]>=nums[start]&&nums[mid]>nums[end]){     ///nums[mid]>=nums[start]&&nums[mid]>nums[end]!!!
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        return nums[start];
    }
}
----------------------------------------------------------------
METHOD THREE(70.53% 0ms T1£©
public class Solution {
    public int findMin(int[] nums) {
        if(nums[0]<=nums[nums.length-1])return nums[0];
        int start=0;
        int end=nums.length-1;
        int mid=0;
        while(start<end-1){			////start<end-1 is important for this method!!!!
            mid=(start+end)/2;
            if(nums[mid]>nums[end]){
                start=mid;
            }else{
                end=mid;
            }
        }
        return Integer.min(nums[start],nums[end]);
    }
}
------------------------------------------------------------------
METHOD 3.1(70.53% 0ms T1)
public class Solution {
    public int findMin(int[] nums) {
        if(nums[0]<=nums[nums.length-1])return nums[0];
        int start=0;
        int end=nums.length-1;
        int mid=0;
        while(start<end){
            mid=(start+end)/2;
            if(nums[mid]>nums[end]){
                start=mid+1;
            }else{
                end=mid;
            }
        }
        return nums[start];
    }
}