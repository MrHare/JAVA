METHOD ONE(86.33% 7ms)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int findBottomLeftValue(TreeNode root) {
        int[] result=new int[2];//int[0] val   int[1] maxdepth
        result[0]=root.val;
        findResult(result,root,0);
        return result[0];
    }
    public void findResult(int[] result,TreeNode root,int depth){
        if(root==null)return;
        if(depth>result[1]){
            result[0]=root.val;
            result[1]=depth;
        }
        findResult(result,root.left,depth+1);
        findResult(result,root.right,depth+1);
    }
}
------------------------------------
a little change,judge whether the node is null before recursive would be more efficient
Mehtod 1.1
public class Solution {
    public int findBottomLeftValue(TreeNode root) {
        int[] result=new int[2];//int[0] val   int[1] maxdepth
        result[0]=root.val;
        findResult(result,root,0);
        return result[0];
    }
    public void findResult(int[] result,TreeNode root,int depth){
        if(depth>result[1]){
            result[0]=root.val;
            result[1]=depth;
        }
        if(root.left!=null)findResult(result,root.left,depth+1);
        if(root.right!=null)findResult(result,root.right,depth+1);
    }
}
